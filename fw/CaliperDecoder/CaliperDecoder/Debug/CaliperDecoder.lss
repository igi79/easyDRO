
CaliperDecoder.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000376  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00000376  0000040a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000002d  00800060  00800060  0000040a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000040a  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000080  00000000  00000000  0000043a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000004e4  00000000  00000000  000004ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000029a  00000000  00000000  0000099e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000006cb  00000000  00000000  00000c38  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000148  00000000  00000000  00001304  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000062bc  00000000  00000000  0000144c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000298  00000000  00000000  00007708  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  000079a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00001ded  00000000  00000000  00007a00  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0e c0       	rjmp	.+28     	; 0x1e <__ctors_end>
   2:	28 c0       	rjmp	.+80     	; 0x54 <__bad_interrupt>
   4:	3f c0       	rjmp	.+126    	; 0x84 <__vector_2>
   6:	26 c0       	rjmp	.+76     	; 0x54 <__bad_interrupt>
   8:	25 c0       	rjmp	.+74     	; 0x54 <__bad_interrupt>
   a:	24 c0       	rjmp	.+72     	; 0x54 <__bad_interrupt>
   c:	23 c0       	rjmp	.+70     	; 0x54 <__bad_interrupt>
   e:	22 c0       	rjmp	.+68     	; 0x54 <__bad_interrupt>
  10:	21 c0       	rjmp	.+66     	; 0x54 <__bad_interrupt>
  12:	20 c0       	rjmp	.+64     	; 0x54 <__bad_interrupt>
  14:	20 c0       	rjmp	.+64     	; 0x56 <__vector_10>
  16:	1e c0       	rjmp	.+60     	; 0x54 <__bad_interrupt>
  18:	1d c0       	rjmp	.+58     	; 0x54 <__bad_interrupt>
  1a:	0e c1       	rjmp	.+540    	; 0x238 <__vector_13>
  1c:	31 c1       	rjmp	.+610    	; 0x280 <__vector_14>

0000001e <__ctors_end>:
  1e:	11 24       	eor	r1, r1
  20:	1f be       	out	0x3f, r1	; 63
  22:	cf e5       	ldi	r28, 0x5F	; 95
  24:	d2 e0       	ldi	r29, 0x02	; 2
  26:	de bf       	out	0x3e, r29	; 62
  28:	cd bf       	out	0x3d, r28	; 61

0000002a <__do_copy_data>:
  2a:	10 e0       	ldi	r17, 0x00	; 0
  2c:	a0 e6       	ldi	r26, 0x60	; 96
  2e:	b0 e0       	ldi	r27, 0x00	; 0
  30:	e6 e7       	ldi	r30, 0x76	; 118
  32:	f3 e0       	ldi	r31, 0x03	; 3
  34:	02 c0       	rjmp	.+4      	; 0x3a <__do_copy_data+0x10>
  36:	05 90       	lpm	r0, Z+
  38:	0d 92       	st	X+, r0
  3a:	a0 36       	cpi	r26, 0x60	; 96
  3c:	b1 07       	cpc	r27, r17
  3e:	d9 f7       	brne	.-10     	; 0x36 <__do_copy_data+0xc>

00000040 <__do_clear_bss>:
  40:	20 e0       	ldi	r18, 0x00	; 0
  42:	a0 e6       	ldi	r26, 0x60	; 96
  44:	b0 e0       	ldi	r27, 0x00	; 0
  46:	01 c0       	rjmp	.+2      	; 0x4a <.do_clear_bss_start>

00000048 <.do_clear_bss_loop>:
  48:	1d 92       	st	X+, r1

0000004a <.do_clear_bss_start>:
  4a:	ad 38       	cpi	r26, 0x8D	; 141
  4c:	b2 07       	cpc	r27, r18
  4e:	e1 f7       	brne	.-8      	; 0x48 <.do_clear_bss_loop>
  50:	a0 d0       	rcall	.+320    	; 0x192 <main>
  52:	8f c1       	rjmp	.+798    	; 0x372 <_exit>

00000054 <__bad_interrupt>:
  54:	d5 cf       	rjmp	.-86     	; 0x0 <__vectors>

00000056 <__vector_10>:
volatile uint16_t lom, him;
volatile uint8_t np = 1;
volatile long int f=0;

ISR(TIMER0_COMPA_vect)
{
  56:	1f 92       	push	r1
  58:	0f 92       	push	r0
  5a:	0f b6       	in	r0, 0x3f	; 63
  5c:	0f 92       	push	r0
  5e:	11 24       	eor	r1, r1
  60:	8f 93       	push	r24
  62:	9f 93       	push	r25
	ms++;
  64:	80 91 60 00 	lds	r24, 0x0060
  68:	90 91 61 00 	lds	r25, 0x0061
  6c:	01 96       	adiw	r24, 0x01	; 1
  6e:	90 93 61 00 	sts	0x0061, r25
  72:	80 93 60 00 	sts	0x0060, r24
}
  76:	9f 91       	pop	r25
  78:	8f 91       	pop	r24
  7a:	0f 90       	pop	r0
  7c:	0f be       	out	0x3f, r0	; 63
  7e:	0f 90       	pop	r0
  80:	1f 90       	pop	r1
  82:	18 95       	reti

00000084 <__vector_2>:

ISR (PCINT0_vect)
{
  84:	1f 92       	push	r1
  86:	0f 92       	push	r0
  88:	0f b6       	in	r0, 0x3f	; 63
  8a:	0f 92       	push	r0
  8c:	11 24       	eor	r1, r1
  8e:	2f 93       	push	r18
  90:	3f 93       	push	r19
  92:	4f 93       	push	r20
  94:	5f 93       	push	r21
  96:	6f 93       	push	r22
  98:	7f 93       	push	r23
  9a:	8f 93       	push	r24
  9c:	9f 93       	push	r25
  9e:	ef 93       	push	r30
  a0:	ff 93       	push	r31
	
	uint8_t changedbits;

	changedbits = PINB ^ portbhistory;
  a2:	96 b3       	in	r25, 0x16	; 22
  a4:	80 91 62 00 	lds	r24, 0x0062
	portbhistory = PINB;
  a8:	26 b3       	in	r18, 0x16	; 22
  aa:	20 93 62 00 	sts	0x0062, r18
ISR (PCINT0_vect)
{
	
	uint8_t changedbits;

	changedbits = PINB ^ portbhistory;
  ae:	89 27       	eor	r24, r25
	portbhistory = PINB;

	if(changedbits & (1 << PB4) && chb(PINB,PB4))
  b0:	84 ff       	sbrs	r24, 4
  b2:	48 c0       	rjmp	.+144    	; 0x144 <__vector_2+0xc0>
  b4:	b4 9b       	sbis	0x16, 4	; 22
  b6:	46 c0       	rjmp	.+140    	; 0x144 <__vector_2+0xc0>
	{
		cli();		
  b8:	f8 94       	cli
		if(ms > 20){
  ba:	80 91 60 00 	lds	r24, 0x0060
  be:	90 91 61 00 	lds	r25, 0x0061
  c2:	45 97       	sbiw	r24, 0x15	; 21
  c4:	d0 f1       	brcs	.+116    	; 0x13a <__vector_2+0xb6>
  c6:	80 e0       	ldi	r24, 0x00	; 0
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	20 e0       	ldi	r18, 0x00	; 0
  cc:	30 e0       	ldi	r19, 0x00	; 0
			uint16_t m1=0;
			uint16_t m2=0;
			uint8_t bit = 0, positive = 1;
			for(bit = 0; bit<16; bit++){
				while(chb(PINB,PB4));
				if(chb(PINB,PB3))m1 |= (1 << bit);
  ce:	61 e0       	ldi	r22, 0x01	; 1
  d0:	70 e0       	ldi	r23, 0x00	; 0
		if(ms > 20){
			uint16_t m1=0;
			uint16_t m2=0;
			uint8_t bit = 0, positive = 1;
			for(bit = 0; bit<16; bit++){
				while(chb(PINB,PB4));
  d2:	b4 99       	sbic	0x16, 4	; 22
  d4:	fe cf       	rjmp	.-4      	; 0xd2 <__vector_2+0x4e>
				if(chb(PINB,PB3))m1 |= (1 << bit);
  d6:	b3 9b       	sbis	0x16, 3	; 22
  d8:	09 c0       	rjmp	.+18     	; 0xec <__vector_2+0x68>
  da:	ab 01       	movw	r20, r22
  dc:	08 2e       	mov	r0, r24
  de:	02 c0       	rjmp	.+4      	; 0xe4 <__vector_2+0x60>
  e0:	44 0f       	add	r20, r20
  e2:	55 1f       	adc	r21, r21
  e4:	0a 94       	dec	r0
  e6:	e2 f7       	brpl	.-8      	; 0xe0 <__vector_2+0x5c>
  e8:	24 2b       	or	r18, r20
  ea:	35 2b       	or	r19, r21
				while(!chb(PINB,PB4));
  ec:	b4 9b       	sbis	0x16, 4	; 22
  ee:	fe cf       	rjmp	.-4      	; 0xec <__vector_2+0x68>
  f0:	01 96       	adiw	r24, 0x01	; 1
		cli();		
		if(ms > 20){
			uint16_t m1=0;
			uint16_t m2=0;
			uint8_t bit = 0, positive = 1;
			for(bit = 0; bit<16; bit++){
  f2:	80 31       	cpi	r24, 0x10	; 16
  f4:	91 05       	cpc	r25, r1
  f6:	69 f7       	brne	.-38     	; 0xd2 <__vector_2+0x4e>
  f8:	80 e0       	ldi	r24, 0x00	; 0
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	40 e0       	ldi	r20, 0x00	; 0
  fe:	50 e0       	ldi	r21, 0x00	; 0
				if(chb(PINB,PB3))m1 |= (1 << bit);
				while(!chb(PINB,PB4));
			}
			for(bit = 0; bit < 12; bit++){
				while(chb(PINB,PB4));
				if(chb(PINB,PB3))m2 |= (1 << bit);
 100:	e1 e0       	ldi	r30, 0x01	; 1
 102:	f0 e0       	ldi	r31, 0x00	; 0
				while(chb(PINB,PB4));
				if(chb(PINB,PB3))m1 |= (1 << bit);
				while(!chb(PINB,PB4));
			}
			for(bit = 0; bit < 12; bit++){
				while(chb(PINB,PB4));
 104:	b4 99       	sbic	0x16, 4	; 22
 106:	fe cf       	rjmp	.-4      	; 0x104 <__vector_2+0x80>
				if(chb(PINB,PB3))m2 |= (1 << bit);
 108:	b3 9b       	sbis	0x16, 3	; 22
 10a:	09 c0       	rjmp	.+18     	; 0x11e <__vector_2+0x9a>
 10c:	bf 01       	movw	r22, r30
 10e:	08 2e       	mov	r0, r24
 110:	02 c0       	rjmp	.+4      	; 0x116 <__vector_2+0x92>
 112:	66 0f       	add	r22, r22
 114:	77 1f       	adc	r23, r23
 116:	0a 94       	dec	r0
 118:	e2 f7       	brpl	.-8      	; 0x112 <__vector_2+0x8e>
 11a:	46 2b       	or	r20, r22
 11c:	57 2b       	or	r21, r23
				while(!chb(PINB,PB4));
 11e:	b4 9b       	sbis	0x16, 4	; 22
 120:	fe cf       	rjmp	.-4      	; 0x11e <__vector_2+0x9a>
 122:	01 96       	adiw	r24, 0x01	; 1
			for(bit = 0; bit<16; bit++){
				while(chb(PINB,PB4));
				if(chb(PINB,PB3))m1 |= (1 << bit);
				while(!chb(PINB,PB4));
			}
			for(bit = 0; bit < 12; bit++){
 124:	8c 30       	cpi	r24, 0x0C	; 12
 126:	91 05       	cpc	r25, r1
 128:	69 f7       	brne	.-38     	; 0x104 <__vector_2+0x80>
			/*
			while(chb(PINB,PB4));
			if(chb(PINB,PB3))positive = 0;
			np = positive;
			*/	
			lom = m1;
 12a:	30 93 8a 00 	sts	0x008A, r19
 12e:	20 93 89 00 	sts	0x0089, r18
			him = m2;
 132:	50 93 8c 00 	sts	0x008C, r21
 136:	40 93 8b 00 	sts	0x008B, r20
			
			
			//np = chb(m3,5) ? -1 : 1;
		}
		ms = 0;
 13a:	10 92 61 00 	sts	0x0061, r1
 13e:	10 92 60 00 	sts	0x0060, r1
		sei();
 142:	78 94       	sei
	}
}
 144:	ff 91       	pop	r31
 146:	ef 91       	pop	r30
 148:	9f 91       	pop	r25
 14a:	8f 91       	pop	r24
 14c:	7f 91       	pop	r23
 14e:	6f 91       	pop	r22
 150:	5f 91       	pop	r21
 152:	4f 91       	pop	r20
 154:	3f 91       	pop	r19
 156:	2f 91       	pop	r18
 158:	0f 90       	pop	r0
 15a:	0f be       	out	0x3f, r0	; 63
 15c:	0f 90       	pop	r0
 15e:	1f 90       	pop	r1
 160:	18 95       	reti

00000162 <init>:

void init(void){
	
	DDRB |= _BV(DDB1);
 162:	b9 9a       	sbi	0x17, 1	; 23
	const uint8_t slaveAddress = 0x16;
	usiTwiSlaveInit(slaveAddress);
 164:	86 e1       	ldi	r24, 0x16	; 22
 166:	27 d0       	rcall	.+78     	; 0x1b6 <usiTwiSlaveInit>
	
	cbi(PORTB,PB4); //disable pull-up resistor
 168:	c4 98       	cbi	0x18, 4	; 24
	cbi(DDRB,DDB4); //input
 16a:	bc 98       	cbi	0x17, 4	; 23
	cbi(PORTB,PB4);
 16c:	c4 98       	cbi	0x18, 4	; 24

	cbi(PORTB,PB3); //disable pull-up resistor
 16e:	c3 98       	cbi	0x18, 3	; 24
	cbi(DDRB,DDB3); //input
 170:	bb 98       	cbi	0x17, 3	; 23
	cbi(PORTB,PB3);	
 172:	c3 98       	cbi	0x18, 3	; 24
	
	sbi(GIMSK,PCIE); // Turn on Pin Change interrupt
 174:	8b b7       	in	r24, 0x3b	; 59
 176:	80 62       	ori	r24, 0x20	; 32
 178:	8b bf       	out	0x3b, r24	; 59
	sbi(PCMSK,PCINT4);
 17a:	ac 9a       	sbi	0x15, 4	; 21
	
	TCCR0A = 0b0000010;
 17c:	82 e0       	ldi	r24, 0x02	; 2
 17e:	8a bd       	out	0x2a, r24	; 42
	TCCR0B = 0b0000101;
 180:	85 e0       	ldi	r24, 0x05	; 5
 182:	83 bf       	out	0x33, r24	; 51
	OCR0A =  78;
 184:	8e e4       	ldi	r24, 0x4E	; 78
 186:	89 bd       	out	0x29, r24	; 41
	sbi(TIMSK, OCIE0A);
 188:	89 b7       	in	r24, 0x39	; 57
 18a:	80 61       	ori	r24, 0x10	; 16
 18c:	89 bf       	out	0x39, r24	; 57
	
	sei();
 18e:	78 94       	sei
 190:	08 95       	ret

00000192 <main>:
}
#endif

int main(void)
{
	init();
 192:	e7 df       	rcall	.-50     	; 0x162 <init>

	while(1)
	{
		if(usiTwiDataInReceiveBuffer())
 194:	48 d0       	rcall	.+144    	; 0x226 <usiTwiDataInReceiveBuffer>
 196:	88 23       	and	r24, r24
 198:	e9 f3       	breq	.-6      	; 0x194 <main+0x2>
		{
			uint8_t value;
			uint8_t temp = usiTwiReceiveByte();
 19a:	32 d0       	rcall	.+100    	; 0x200 <usiTwiReceiveByte>
			
			#else
			
			uint8_t *ptr, i;
			ptr = (uint8_t *)&lom;
			for (i = 0; i < 2; usiTwiTransmitByte(*(ptr + i)), i++);
 19c:	80 91 89 00 	lds	r24, 0x0089
 1a0:	1f d0       	rcall	.+62     	; 0x1e0 <usiTwiTransmitByte>
 1a2:	80 91 8a 00 	lds	r24, 0x008A
 1a6:	1c d0       	rcall	.+56     	; 0x1e0 <usiTwiTransmitByte>
			ptr = (uint8_t *)&him;
			for (i = 0; i < 2; usiTwiTransmitByte(*(ptr + i)), i++);
 1a8:	80 91 8b 00 	lds	r24, 0x008B
 1ac:	19 d0       	rcall	.+50     	; 0x1e0 <usiTwiTransmitByte>
 1ae:	80 91 8c 00 	lds	r24, 0x008C
 1b2:	16 d0       	rcall	.+44     	; 0x1e0 <usiTwiTransmitByte>
 1b4:	ef cf       	rjmp	.-34     	; 0x194 <main+0x2>

000001b6 <usiTwiSlaveInit>:
void
flushTwiBuffers(
  void
)
{
  rxTail = 0;
 1b6:	10 92 75 00 	sts	0x0075, r1
  rxHead = 0;
 1ba:	10 92 76 00 	sts	0x0076, r1
  txTail = 0;
 1be:	10 92 63 00 	sts	0x0063, r1
  txHead = 0;
 1c2:	10 92 64 00 	sts	0x0064, r1
)
{

  flushTwiBuffers( );

  slaveAddress = ownAddress;
 1c6:	80 93 88 00 	sts	0x0088, r24
  // low when a start condition is detected or a counter overflow (only
  // for USIWM1, USIWM0 = 11).  This inserts a wait state.  SCL is released
  // by the ISRs (USI_START_vect and USI_OVERFLOW_vect).

  // Set SCL and SDA as output
  DDR_USI |= ( 1 << PORT_USI_SCL ) | ( 1 << PORT_USI_SDA );
 1ca:	87 b3       	in	r24, 0x17	; 23
 1cc:	85 60       	ori	r24, 0x05	; 5
 1ce:	87 bb       	out	0x17, r24	; 23

  // set SCL high
  PORT_USI |= ( 1 << PORT_USI_SCL );
 1d0:	c2 9a       	sbi	0x18, 2	; 24

  // set SDA high
  PORT_USI |= ( 1 << PORT_USI_SDA );
 1d2:	c0 9a       	sbi	0x18, 0	; 24

  // Set SDA as input
  DDR_USI &= ~( 1 << PORT_USI_SDA );
 1d4:	b8 98       	cbi	0x17, 0	; 23

  USICR =
 1d6:	88 ea       	ldi	r24, 0xA8	; 168
 1d8:	8d b9       	out	0x0d, r24	; 13
       // no toggle clock-port pin
       ( 0 << USITC );

  // clear all interrupt flags and reset overflow counter

  USISR = ( 1 << USI_START_COND_INT ) | ( 1 << USIOIF ) | ( 1 << USIPF ) | ( 1 << USIDC );
 1da:	80 ef       	ldi	r24, 0xF0	; 240
 1dc:	8e b9       	out	0x0e, r24	; 14
 1de:	08 95       	ret

000001e0 <usiTwiTransmitByte>:
{

  uint8_t tmphead;

  // calculate buffer index
  tmphead = ( txHead + 1 ) & TWI_TX_BUFFER_MASK;
 1e0:	20 91 64 00 	lds	r18, 0x0064
 1e4:	2f 5f       	subi	r18, 0xFF	; 255
 1e6:	2f 70       	andi	r18, 0x0F	; 15

  // wait for free space in buffer
  while ( tmphead == txTail );
 1e8:	90 91 63 00 	lds	r25, 0x0063
 1ec:	29 17       	cp	r18, r25
 1ee:	e1 f3       	breq	.-8      	; 0x1e8 <usiTwiTransmitByte+0x8>

  // store data in buffer
  txBuf[ tmphead ] = data;
 1f0:	e2 2f       	mov	r30, r18
 1f2:	f0 e0       	ldi	r31, 0x00	; 0
 1f4:	eb 59       	subi	r30, 0x9B	; 155
 1f6:	ff 4f       	sbci	r31, 0xFF	; 255
 1f8:	80 83       	st	Z, r24

  // store new index
  txHead = tmphead;
 1fa:	20 93 64 00 	sts	0x0064, r18
 1fe:	08 95       	ret

00000200 <usiTwiReceiveByte>:
  void
)
{

  // wait for Rx data
  while ( rxHead == rxTail );
 200:	90 91 76 00 	lds	r25, 0x0076
 204:	80 91 75 00 	lds	r24, 0x0075
 208:	98 17       	cp	r25, r24
 20a:	d1 f3       	breq	.-12     	; 0x200 <usiTwiReceiveByte>

  // calculate buffer index
  rxTail = ( rxTail + 1 ) & TWI_RX_BUFFER_MASK;
 20c:	80 91 75 00 	lds	r24, 0x0075
 210:	8f 5f       	subi	r24, 0xFF	; 255
 212:	8f 70       	andi	r24, 0x0F	; 15
 214:	80 93 75 00 	sts	0x0075, r24

  // return data from the buffer.
  return rxBuf[ rxTail ];
 218:	e0 91 75 00 	lds	r30, 0x0075
 21c:	f0 e0       	ldi	r31, 0x00	; 0
 21e:	e9 58       	subi	r30, 0x89	; 137
 220:	ff 4f       	sbci	r31, 0xFF	; 255

} // end usiTwiReceiveByte
 222:	80 81       	ld	r24, Z
 224:	08 95       	ret

00000226 <usiTwiDataInReceiveBuffer>:
  void
)
{

  // return 0 (false) if the receive buffer is empty
  return rxHead != rxTail;
 226:	20 91 76 00 	lds	r18, 0x0076
 22a:	90 91 75 00 	lds	r25, 0x0075
 22e:	81 e0       	ldi	r24, 0x01	; 1
 230:	29 13       	cpse	r18, r25

} // end usiTwiDataInReceiveBuffer
 232:	08 95       	ret
  void
)
{

  // return 0 (false) if the receive buffer is empty
  return rxHead != rxTail;
 234:	80 e0       	ldi	r24, 0x00	; 0

} // end usiTwiDataInReceiveBuffer
 236:	08 95       	ret

00000238 <__vector_13>:
                            USI Start Condition ISR

********************************************************************************/

ISR( USI_START_VECTOR )
{
 238:	1f 92       	push	r1
 23a:	0f 92       	push	r0
 23c:	0f b6       	in	r0, 0x3f	; 63
 23e:	0f 92       	push	r0
 240:	11 24       	eor	r1, r1
 242:	8f 93       	push	r24

  // set default starting conditions for new TWI package
  overflowState = USI_SLAVE_CHECK_ADDRESS;
 244:	10 92 87 00 	sts	0x0087, r1

  // set SDA as input
  DDR_USI &= ~( 1 << PORT_USI_SDA );
 248:	b8 98       	cbi	0x17, 0	; 23
  // wait for SCL to go low to ensure the Start Condition has completed (the
  // start detector will hold SCL low ) - if a Stop Condition arises then leave
  // the interrupt to prevent waiting forever - don't use USISR to test for Stop
  // Condition as in Application Note AVR312 because the Stop Condition Flag is
  // going to be set from the last TWI sequence
  while (
 24a:	02 c0       	rjmp	.+4      	; 0x250 <__vector_13+0x18>
       // SCL his high
       ( PIN_USI & ( 1 << PIN_USI_SCL ) ) &&
 24c:	b0 99       	sbic	0x16, 0	; 22
 24e:	02 c0       	rjmp	.+4      	; 0x254 <__vector_13+0x1c>
  // wait for SCL to go low to ensure the Start Condition has completed (the
  // start detector will hold SCL low ) - if a Stop Condition arises then leave
  // the interrupt to prevent waiting forever - don't use USISR to test for Stop
  // Condition as in Application Note AVR312 because the Stop Condition Flag is
  // going to be set from the last TWI sequence
  while (
 250:	b2 99       	sbic	0x16, 2	; 22
 252:	fc cf       	rjmp	.-8      	; 0x24c <__vector_13+0x14>
       // and SDA is low
       !( ( PIN_USI & ( 1 << PIN_USI_SDA ) ) )
  );


  if ( !( PIN_USI & ( 1 << PIN_USI_SDA ) ) )
 254:	b0 9b       	sbis	0x16, 0	; 22
 256:	0a c0       	rjmp	.+20     	; 0x26c <__stack+0xd>
  }
  else
  {

    // a Stop Condition did occur
    USICR =
 258:	88 ea       	ldi	r24, 0xA8	; 168
 25a:	8d b9       	out	0x0d, r24	; 13
         // no toggle clock-port pin
         ( 0 << USITC );

  } // end if

  USISR =
 25c:	80 ef       	ldi	r24, 0xF0	; 240
 25e:	8e b9       	out	0x0e, r24	; 14
       ( 1 << USI_START_COND_INT ) | ( 1 << USIOIF ) |
       ( 1 << USIPF ) |( 1 << USIDC ) |
       // set USI to sample 8 bits (count 16 external SCL pin toggles)
       ( 0x0 << USICNT0);

} // end ISR( USI_START_VECTOR )
 260:	8f 91       	pop	r24
 262:	0f 90       	pop	r0
 264:	0f be       	out	0x3f, r0	; 63
 266:	0f 90       	pop	r0
 268:	1f 90       	pop	r1
 26a:	18 95       	reti
  if ( !( PIN_USI & ( 1 << PIN_USI_SDA ) ) )
  {

    // a Stop Condition did not occur

    USICR =
 26c:	88 ef       	ldi	r24, 0xF8	; 248
 26e:	8d b9       	out	0x0d, r24	; 13
         // no toggle clock-port pin
         ( 0 << USITC );

  } // end if

  USISR =
 270:	80 ef       	ldi	r24, 0xF0	; 240
 272:	8e b9       	out	0x0e, r24	; 14
       ( 1 << USI_START_COND_INT ) | ( 1 << USIOIF ) |
       ( 1 << USIPF ) |( 1 << USIDC ) |
       // set USI to sample 8 bits (count 16 external SCL pin toggles)
       ( 0x0 << USICNT0);

} // end ISR( USI_START_VECTOR )
 274:	8f 91       	pop	r24
 276:	0f 90       	pop	r0
 278:	0f be       	out	0x3f, r0	; 63
 27a:	0f 90       	pop	r0
 27c:	1f 90       	pop	r1
 27e:	18 95       	reti

00000280 <__vector_14>:
Only disabled when waiting for a new Start Condition.

********************************************************************************/

ISR( USI_OVERFLOW_VECTOR )
{
 280:	1f 92       	push	r1
 282:	0f 92       	push	r0
 284:	0f b6       	in	r0, 0x3f	; 63
 286:	0f 92       	push	r0
 288:	11 24       	eor	r1, r1
 28a:	8f 93       	push	r24
 28c:	9f 93       	push	r25
 28e:	ef 93       	push	r30
 290:	ff 93       	push	r31

  switch ( overflowState )
 292:	80 91 87 00 	lds	r24, 0x0087
 296:	82 30       	cpi	r24, 0x02	; 2
 298:	09 f4       	brne	.+2      	; 0x29c <__vector_14+0x1c>
 29a:	58 c0       	rjmp	.+176    	; 0x34c <__vector_14+0xcc>
 29c:	20 f1       	brcs	.+72     	; 0x2e6 <__vector_14+0x66>
 29e:	84 30       	cpi	r24, 0x04	; 4
 2a0:	09 f4       	brne	.+2      	; 0x2a4 <__vector_14+0x24>
 2a2:	3f c0       	rjmp	.+126    	; 0x322 <__vector_14+0xa2>
 2a4:	08 f4       	brcc	.+2      	; 0x2a8 <__vector_14+0x28>
 2a6:	60 c0       	rjmp	.+192    	; 0x368 <__vector_14+0xe8>
 2a8:	85 30       	cpi	r24, 0x05	; 5
 2aa:	a1 f4       	brne	.+40     	; 0x2d4 <__vector_14+0x54>
    // copy data from USIDR and send ACK
    // next USI_SLAVE_REQUEST_DATA
    case USI_SLAVE_GET_DATA_AND_SEND_ACK:
      // put data into buffer
      // Not necessary, but prevents warnings
      rxHead = ( rxHead + 1 ) & TWI_RX_BUFFER_MASK;
 2ac:	80 91 76 00 	lds	r24, 0x0076
 2b0:	8f 5f       	subi	r24, 0xFF	; 255
 2b2:	8f 70       	andi	r24, 0x0F	; 15
 2b4:	80 93 76 00 	sts	0x0076, r24
      rxBuf[ rxHead ] = USIDR;
 2b8:	e0 91 76 00 	lds	r30, 0x0076
 2bc:	8f b1       	in	r24, 0x0f	; 15
 2be:	f0 e0       	ldi	r31, 0x00	; 0
 2c0:	e9 58       	subi	r30, 0x89	; 137
 2c2:	ff 4f       	sbci	r31, 0xFF	; 255
 2c4:	80 83       	st	Z, r24
      // next USI_SLAVE_REQUEST_DATA
      overflowState = USI_SLAVE_REQUEST_DATA;
 2c6:	84 e0       	ldi	r24, 0x04	; 4
 2c8:	80 93 87 00 	sts	0x0087, r24
      SET_USI_TO_SEND_ACK( );
 2cc:	1f b8       	out	0x0f, r1	; 15
 2ce:	b8 9a       	sbi	0x17, 0	; 23
 2d0:	8e e7       	ldi	r24, 0x7E	; 126
 2d2:	8e b9       	out	0x0e, r24	; 14
      break;

  } // end switch

} // end ISR( USI_OVERFLOW_VECTOR )
 2d4:	ff 91       	pop	r31
 2d6:	ef 91       	pop	r30
 2d8:	9f 91       	pop	r25
 2da:	8f 91       	pop	r24
 2dc:	0f 90       	pop	r0
 2de:	0f be       	out	0x3f, r0	; 63
 2e0:	0f 90       	pop	r0
 2e2:	1f 90       	pop	r1
 2e4:	18 95       	reti
********************************************************************************/

ISR( USI_OVERFLOW_VECTOR )
{

  switch ( overflowState )
 2e6:	88 23       	and	r24, r24
 2e8:	19 f1       	breq	.+70     	; 0x330 <__vector_14+0xb0>
 2ea:	81 30       	cpi	r24, 0x01	; 1
 2ec:	99 f7       	brne	.-26     	; 0x2d4 <__vector_14+0x54>

    // copy data from buffer to USIDR and set USI to shift byte
    // next USI_SLAVE_REQUEST_REPLY_FROM_SEND_DATA
    case USI_SLAVE_SEND_DATA:
      // Get data from Buffer
      if ( txHead != txTail )
 2ee:	90 91 64 00 	lds	r25, 0x0064
 2f2:	80 91 63 00 	lds	r24, 0x0063
 2f6:	98 17       	cp	r25, r24
 2f8:	21 f1       	breq	.+72     	; 0x342 <__vector_14+0xc2>
      {
        txTail = ( txTail + 1 ) & TWI_TX_BUFFER_MASK;
 2fa:	80 91 63 00 	lds	r24, 0x0063
 2fe:	8f 5f       	subi	r24, 0xFF	; 255
 300:	8f 70       	andi	r24, 0x0F	; 15
 302:	80 93 63 00 	sts	0x0063, r24
        USIDR = txBuf[ txTail ];
 306:	e0 91 63 00 	lds	r30, 0x0063
 30a:	f0 e0       	ldi	r31, 0x00	; 0
 30c:	eb 59       	subi	r30, 0x9B	; 155
 30e:	ff 4f       	sbci	r31, 0xFF	; 255
 310:	80 81       	ld	r24, Z
 312:	8f b9       	out	0x0f, r24	; 15
      {
        // the buffer is empty
        SET_USI_TO_TWI_START_CONDITION_MODE( );
        return;
      } // end if
      overflowState = USI_SLAVE_REQUEST_REPLY_FROM_SEND_DATA;
 314:	82 e0       	ldi	r24, 0x02	; 2
 316:	80 93 87 00 	sts	0x0087, r24
      SET_USI_TO_SEND_DATA( );
 31a:	b8 9a       	sbi	0x17, 0	; 23
 31c:	80 e7       	ldi	r24, 0x70	; 112
 31e:	8e b9       	out	0x0e, r24	; 14
      break;
 320:	d9 cf       	rjmp	.-78     	; 0x2d4 <__vector_14+0x54>
      break;

    // Master read data mode: set USI to sample data from master, next
    // USI_SLAVE_GET_DATA_AND_SEND_ACK
    case USI_SLAVE_REQUEST_DATA:
      overflowState = USI_SLAVE_GET_DATA_AND_SEND_ACK;
 322:	85 e0       	ldi	r24, 0x05	; 5
 324:	80 93 87 00 	sts	0x0087, r24
      SET_USI_TO_READ_DATA( );
 328:	b8 98       	cbi	0x17, 0	; 23
 32a:	80 e7       	ldi	r24, 0x70	; 112
 32c:	8e b9       	out	0x0e, r24	; 14
      break;
 32e:	d2 cf       	rjmp	.-92     	; 0x2d4 <__vector_14+0x54>
  {

    // Address mode: check address and send ACK (and next USI_SLAVE_SEND_DATA) if OK,
    // else reset USI
    case USI_SLAVE_CHECK_ADDRESS:
      if ( ( USIDR == 0 ) || ( ( USIDR >> 1 ) == slaveAddress) )
 330:	8f b1       	in	r24, 0x0f	; 15
 332:	88 23       	and	r24, r24
 334:	99 f0       	breq	.+38     	; 0x35c <__vector_14+0xdc>
 336:	8f b1       	in	r24, 0x0f	; 15
 338:	86 95       	lsr	r24
 33a:	90 91 88 00 	lds	r25, 0x0088
 33e:	89 17       	cp	r24, r25
 340:	69 f0       	breq	.+26     	; 0x35c <__vector_14+0xdc>
        USIDR = txBuf[ txTail ];
      }
      else
      {
        // the buffer is empty
        SET_USI_TO_TWI_START_CONDITION_MODE( );
 342:	88 ea       	ldi	r24, 0xA8	; 168
 344:	8d b9       	out	0x0d, r24	; 13
 346:	80 e7       	ldi	r24, 0x70	; 112
 348:	8e b9       	out	0x0e, r24	; 14
        return;
 34a:	c4 cf       	rjmp	.-120    	; 0x2d4 <__vector_14+0x54>
      break;

    // set USI to sample reply from master
    // next USI_SLAVE_CHECK_REPLY_FROM_SEND_DATA
    case USI_SLAVE_REQUEST_REPLY_FROM_SEND_DATA:
      overflowState = USI_SLAVE_CHECK_REPLY_FROM_SEND_DATA;
 34c:	83 e0       	ldi	r24, 0x03	; 3
 34e:	80 93 87 00 	sts	0x0087, r24
      SET_USI_TO_READ_ACK( );
 352:	b8 98       	cbi	0x17, 0	; 23
 354:	1f b8       	out	0x0f, r1	; 15
 356:	8e e7       	ldi	r24, 0x7E	; 126
 358:	8e b9       	out	0x0e, r24	; 14
      break;
 35a:	bc cf       	rjmp	.-136    	; 0x2d4 <__vector_14+0x54>
    // Address mode: check address and send ACK (and next USI_SLAVE_SEND_DATA) if OK,
    // else reset USI
    case USI_SLAVE_CHECK_ADDRESS:
      if ( ( USIDR == 0 ) || ( ( USIDR >> 1 ) == slaveAddress) )
      {
          if ( USIDR & 0x01 )
 35c:	78 9b       	sbis	0x0f, 0	; 15
 35e:	b3 cf       	rjmp	.-154    	; 0x2c6 <__vector_14+0x46>
        {
          overflowState = USI_SLAVE_SEND_DATA;
 360:	81 e0       	ldi	r24, 0x01	; 1
 362:	80 93 87 00 	sts	0x0087, r24
 366:	b2 cf       	rjmp	.-156    	; 0x2cc <__vector_14+0x4c>
      break;

    // Master write data mode: check reply and goto USI_SLAVE_SEND_DATA if OK,
    // else reset USI
    case USI_SLAVE_CHECK_REPLY_FROM_SEND_DATA:
      if ( USIDR )
 368:	8f b1       	in	r24, 0x0f	; 15
 36a:	88 23       	and	r24, r24
 36c:	09 f4       	brne	.+2      	; 0x370 <__vector_14+0xf0>
 36e:	bf cf       	rjmp	.-130    	; 0x2ee <__vector_14+0x6e>
 370:	e8 cf       	rjmp	.-48     	; 0x342 <__vector_14+0xc2>

00000372 <_exit>:
 372:	f8 94       	cli

00000374 <__stop_program>:
 374:	ff cf       	rjmp	.-2      	; 0x374 <__stop_program>
