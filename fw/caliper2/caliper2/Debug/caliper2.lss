
caliper2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000029e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  0000029e  00000332  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001c  00800060  00800060  00000332  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000332  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000090  00000000  00000000  00000362  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000046b  00000000  00000000  000003f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000002dd  00000000  00000000  0000085d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000292  00000000  00000000  00000b3a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000148  00000000  00000000  00000dcc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000332  00000000  00000000  00000f14  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001e8  00000000  00000000  00001246  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000070  00000000  00000000  0000142e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0e c0       	rjmp	.+28     	; 0x1e <__ctors_end>
   2:	1d c0       	rjmp	.+58     	; 0x3e <__bad_interrupt>
   4:	1c c0       	rjmp	.+56     	; 0x3e <__bad_interrupt>
   6:	1b c0       	rjmp	.+54     	; 0x3e <__bad_interrupt>
   8:	1a c0       	rjmp	.+52     	; 0x3e <__bad_interrupt>
   a:	19 c0       	rjmp	.+50     	; 0x3e <__bad_interrupt>
   c:	18 c0       	rjmp	.+48     	; 0x3e <__bad_interrupt>
   e:	17 c0       	rjmp	.+46     	; 0x3e <__bad_interrupt>
  10:	16 c0       	rjmp	.+44     	; 0x3e <__bad_interrupt>
  12:	15 c0       	rjmp	.+42     	; 0x3e <__bad_interrupt>
  14:	15 c0       	rjmp	.+42     	; 0x40 <__vector_10>
  16:	13 c0       	rjmp	.+38     	; 0x3e <__bad_interrupt>
  18:	12 c0       	rjmp	.+36     	; 0x3e <__bad_interrupt>
  1a:	98 c0       	rjmp	.+304    	; 0x14c <__vector_13>
  1c:	b3 c0       	rjmp	.+358    	; 0x184 <__vector_14>

0000001e <__ctors_end>:
  1e:	11 24       	eor	r1, r1
  20:	1f be       	out	0x3f, r1	; 63
  22:	cf e5       	ldi	r28, 0x5F	; 95
  24:	d1 e0       	ldi	r29, 0x01	; 1
  26:	de bf       	out	0x3e, r29	; 62
  28:	cd bf       	out	0x3d, r28	; 61

0000002a <__do_clear_bss>:
  2a:	20 e0       	ldi	r18, 0x00	; 0
  2c:	a0 e6       	ldi	r26, 0x60	; 96
  2e:	b0 e0       	ldi	r27, 0x00	; 0
  30:	01 c0       	rjmp	.+2      	; 0x34 <.do_clear_bss_start>

00000032 <.do_clear_bss_loop>:
  32:	1d 92       	st	X+, r1

00000034 <.do_clear_bss_start>:
  34:	ac 37       	cpi	r26, 0x7C	; 124
  36:	b2 07       	cpc	r27, r18
  38:	e1 f7       	brne	.-8      	; 0x32 <.do_clear_bss_loop>
  3a:	29 d0       	rcall	.+82     	; 0x8e <main>
  3c:	2e c1       	rjmp	.+604    	; 0x29a <_exit>

0000003e <__bad_interrupt>:
  3e:	e0 cf       	rjmp	.-64     	; 0x0 <__vectors>

00000040 <__vector_10>:
#include <compat/deprecated.h>

volatile unsigned long ms = 0;

ISR(TIMER0_COMPA_vect)
{
  40:	1f 92       	push	r1
  42:	0f 92       	push	r0
  44:	0f b6       	in	r0, 0x3f	; 63
  46:	0f 92       	push	r0
  48:	11 24       	eor	r1, r1
  4a:	8f 93       	push	r24
  4c:	9f 93       	push	r25
  4e:	af 93       	push	r26
  50:	bf 93       	push	r27
	cli();
  52:	f8 94       	cli
	ms++;
  54:	80 91 60 00 	lds	r24, 0x0060
  58:	90 91 61 00 	lds	r25, 0x0061
  5c:	a0 91 62 00 	lds	r26, 0x0062
  60:	b0 91 63 00 	lds	r27, 0x0063
  64:	01 96       	adiw	r24, 0x01	; 1
  66:	a1 1d       	adc	r26, r1
  68:	b1 1d       	adc	r27, r1
  6a:	80 93 60 00 	sts	0x0060, r24
  6e:	90 93 61 00 	sts	0x0061, r25
  72:	a0 93 62 00 	sts	0x0062, r26
  76:	b0 93 63 00 	sts	0x0063, r27
	sei();
  7a:	78 94       	sei
}
  7c:	bf 91       	pop	r27
  7e:	af 91       	pop	r26
  80:	9f 91       	pop	r25
  82:	8f 91       	pop	r24
  84:	0f 90       	pop	r0
  86:	0f be       	out	0x3f, r0	; 63
  88:	0f 90       	pop	r0
  8a:	1f 90       	pop	r1
  8c:	18 95       	reti

0000008e <main>:
	sei();
	return ms;	
}

int main(void)
{
  8e:	cf 93       	push	r28
  90:	df 93       	push	r29
  92:	00 d0       	rcall	.+0      	; 0x94 <main+0x6>
  94:	00 d0       	rcall	.+0      	; 0x96 <main+0x8>
  96:	cd b7       	in	r28, 0x3d	; 61
  98:	de b7       	in	r29, 0x3e	; 62
	TCCR0B = 0b0000101;
	OCR0A =  78;
	//sbi(TIMSK, OCIE0A);		// enable interrupt on TMR0 compare match A
*/
		
	sei(); // enable interupts
  9a:	78 94       	sei
	
	sbi(DDRB,DDB1);
  9c:	b9 9a       	sbi	0x17, 1	; 23
	cbi(PORTB,PB1);
  9e:	c1 98       	cbi	0x18, 1	; 24
	
	cbi(PORTB,PB4); //enable pull-up resistor
  a0:	c4 98       	cbi	0x18, 4	; 24
	cbi(DDRB,DDB4); //input
  a2:	bc 98       	cbi	0x17, 4	; 23
	cbi(PORTB,PB4);
  a4:	c4 98       	cbi	0x18, 4	; 24

	cbi(PORTB,PB3); //enable pull-up resistor
  a6:	c3 98       	cbi	0x18, 3	; 24
	cbi(DDRB,DDB3); //input
  a8:	bb 98       	cbi	0x17, 3	; 23
	//cbi(PORTB,PB3);
	
	float x = 9999;	

	const uint8_t slaveAddress = 0x14;
	usiTwiSlaveInit(slaveAddress);
  aa:	84 e1       	ldi	r24, 0x14	; 20
  ac:	2a d0       	rcall	.+84     	; 0x102 <usiTwiSlaveInit>
  ae:	80 e0       	ldi	r24, 0x00	; 0
  b0:	9c e3       	ldi	r25, 0x3C	; 60
  b2:	ac e1       	ldi	r26, 0x1C	; 28
  b4:	b6 e4       	ldi	r27, 0x46	; 70
  b6:	89 83       	std	Y+1, r24	; 0x01
  b8:	9a 83       	std	Y+2, r25	; 0x02
  ba:	ab 83       	std	Y+3, r26	; 0x03
  bc:	bc 83       	std	Y+4, r27	; 0x04
	
	void sendfloat(float v)
	{
		uint8_t *ptr, i;
		ptr = (uint8_t *)&v;
		for (i = 0; i < sizeof(float); usiTwiTransmitByte(*(ptr + i)), i++);
  be:	80 e0       	ldi	r24, 0x00	; 0
  c0:	35 d0       	rcall	.+106    	; 0x12c <usiTwiTransmitByte>
  c2:	8a 81       	ldd	r24, Y+2	; 0x02
  c4:	33 d0       	rcall	.+102    	; 0x12c <usiTwiTransmitByte>
  c6:	8b 81       	ldd	r24, Y+3	; 0x03
  c8:	31 d0       	rcall	.+98     	; 0x12c <usiTwiTransmitByte>
  ca:	8c 81       	ldd	r24, Y+4	; 0x04
  cc:	2f d0       	rcall	.+94     	; 0x12c <usiTwiTransmitByte>
			
		//x = chb(PINB,PB4) ? 100 : 200;
		
		//_delay_ms(3);
		
		if(chb(PINB,PB4))PORTB ^= _BV(PB1);
  ce:	22 e0       	ldi	r18, 0x02	; 2
  d0:	b4 9b       	sbis	0x16, 4	; 22
  d2:	03 c0       	rjmp	.+6      	; 0xda <main+0x4c>
  d4:	88 b3       	in	r24, 0x18	; 24
  d6:	82 27       	eor	r24, r18
  d8:	88 bb       	out	0x18, r24	; 24
		

		
		ms++;
  da:	80 91 60 00 	lds	r24, 0x0060
  de:	90 91 61 00 	lds	r25, 0x0061
  e2:	a0 91 62 00 	lds	r26, 0x0062
  e6:	b0 91 63 00 	lds	r27, 0x0063
  ea:	01 96       	adiw	r24, 0x01	; 1
  ec:	a1 1d       	adc	r26, r1
  ee:	b1 1d       	adc	r27, r1
  f0:	80 93 60 00 	sts	0x0060, r24
  f4:	90 93 61 00 	sts	0x0061, r25
  f8:	a0 93 62 00 	sts	0x0062, r26
  fc:	b0 93 63 00 	sts	0x0063, r27
	}
 100:	e7 cf       	rjmp	.-50     	; 0xd0 <main+0x42>

00000102 <usiTwiSlaveInit>:
void
flushTwiBuffers(
  void
)
{
  rxTail = 0;
 102:	10 92 76 00 	sts	0x0076, r1
  rxHead = 0;
 106:	10 92 77 00 	sts	0x0077, r1
  txTail = 0;
 10a:	10 92 64 00 	sts	0x0064, r1
  txHead = 0;
 10e:	10 92 65 00 	sts	0x0065, r1
)
{

  flushTwiBuffers( );

  slaveAddress = ownAddress;
 112:	80 93 7b 00 	sts	0x007B, r24
  // low when a start condition is detected or a counter overflow (only
  // for USIWM1, USIWM0 = 11).  This inserts a wait state.  SCL is released
  // by the ISRs (USI_START_vect and USI_OVERFLOW_vect).

  // Set SCL and SDA as output
  DDR_USI |= ( 1 << PORT_USI_SCL ) | ( 1 << PORT_USI_SDA );
 116:	87 b3       	in	r24, 0x17	; 23
 118:	85 60       	ori	r24, 0x05	; 5
 11a:	87 bb       	out	0x17, r24	; 23

  // set SCL high
  PORT_USI |= ( 1 << PORT_USI_SCL );
 11c:	c2 9a       	sbi	0x18, 2	; 24

  // set SDA high
  PORT_USI |= ( 1 << PORT_USI_SDA );
 11e:	c0 9a       	sbi	0x18, 0	; 24

  // Set SDA as input
  DDR_USI &= ~( 1 << PORT_USI_SDA );
 120:	b8 98       	cbi	0x17, 0	; 23

  USICR =
 122:	88 ea       	ldi	r24, 0xA8	; 168
 124:	8d b9       	out	0x0d, r24	; 13
       // no toggle clock-port pin
       ( 0 << USITC );

  // clear all interrupt flags and reset overflow counter

  USISR = ( 1 << USI_START_COND_INT ) | ( 1 << USIOIF ) | ( 1 << USIPF ) | ( 1 << USIDC );
 126:	80 ef       	ldi	r24, 0xF0	; 240
 128:	8e b9       	out	0x0e, r24	; 14
 12a:	08 95       	ret

0000012c <usiTwiTransmitByte>:
{

  uint8_t tmphead;

  // calculate buffer index
  tmphead = ( txHead + 1 ) & TWI_TX_BUFFER_MASK;
 12c:	20 91 65 00 	lds	r18, 0x0065
 130:	2f 5f       	subi	r18, 0xFF	; 255
 132:	2f 70       	andi	r18, 0x0F	; 15

  // wait for free space in buffer
  while ( tmphead == txTail );
 134:	90 91 64 00 	lds	r25, 0x0064
 138:	29 17       	cp	r18, r25
 13a:	e1 f3       	breq	.-8      	; 0x134 <usiTwiTransmitByte+0x8>

  // store data in buffer
  txBuf[ tmphead ] = data;
 13c:	e2 2f       	mov	r30, r18
 13e:	f0 e0       	ldi	r31, 0x00	; 0
 140:	ea 59       	subi	r30, 0x9A	; 154
 142:	ff 4f       	sbci	r31, 0xFF	; 255
 144:	80 83       	st	Z, r24

  // store new index
  txHead = tmphead;
 146:	20 93 65 00 	sts	0x0065, r18
 14a:	08 95       	ret

0000014c <__vector_13>:
                            USI Start Condition ISR

********************************************************************************/

ISR( USI_START_VECTOR )
{
 14c:	1f 92       	push	r1
 14e:	0f 92       	push	r0
 150:	0f b6       	in	r0, 0x3f	; 63
 152:	0f 92       	push	r0
 154:	11 24       	eor	r1, r1
 156:	8f 93       	push	r24

  // set default starting conditions for new TWI package
  overflowState = USI_SLAVE_CHECK_ADDRESS;
 158:	10 92 7a 00 	sts	0x007A, r1

  // set SDA as input
  DDR_USI &= ~( 1 << PORT_USI_SDA );
 15c:	b8 98       	cbi	0x17, 0	; 23
  // wait for SCL to go low to ensure the Start Condition has completed (the
  // start detector will hold SCL low ) - if a Stop Condition arises then leave
  // the interrupt to prevent waiting forever - don't use USISR to test for Stop
  // Condition as in Application Note AVR312 because the Stop Condition Flag is
  // going to be set from the last TWI sequence
  while (
 15e:	b2 9b       	sbis	0x16, 2	; 22
 160:	02 c0       	rjmp	.+4      	; 0x166 <__stack+0x7>
       // SCL his high
       ( PIN_USI & ( 1 << PIN_USI_SCL ) ) &&
 162:	b0 9b       	sbis	0x16, 0	; 22
 164:	fc cf       	rjmp	.-8      	; 0x15e <__vector_13+0x12>
       // and SDA is low
       !( ( PIN_USI & ( 1 << PIN_USI_SDA ) ) )
  );


  if ( !( PIN_USI & ( 1 << PIN_USI_SDA ) ) )
 166:	b0 99       	sbic	0x16, 0	; 22
 168:	03 c0       	rjmp	.+6      	; 0x170 <__stack+0x11>
  {

    // a Stop Condition did not occur

    USICR =
 16a:	88 ef       	ldi	r24, 0xF8	; 248
 16c:	8d b9       	out	0x0d, r24	; 13
 16e:	02 c0       	rjmp	.+4      	; 0x174 <__stack+0x15>
  }
  else
  {

    // a Stop Condition did occur
    USICR =
 170:	88 ea       	ldi	r24, 0xA8	; 168
 172:	8d b9       	out	0x0d, r24	; 13
         // no toggle clock-port pin
         ( 0 << USITC );

  } // end if

  USISR =
 174:	80 ef       	ldi	r24, 0xF0	; 240
 176:	8e b9       	out	0x0e, r24	; 14
       ( 1 << USI_START_COND_INT ) | ( 1 << USIOIF ) |
       ( 1 << USIPF ) |( 1 << USIDC ) |
       // set USI to sample 8 bits (count 16 external SCL pin toggles)
       ( 0x0 << USICNT0);

} // end ISR( USI_START_VECTOR )
 178:	8f 91       	pop	r24
 17a:	0f 90       	pop	r0
 17c:	0f be       	out	0x3f, r0	; 63
 17e:	0f 90       	pop	r0
 180:	1f 90       	pop	r1
 182:	18 95       	reti

00000184 <__vector_14>:
Only disabled when waiting for a new Start Condition.

********************************************************************************/

ISR( USI_OVERFLOW_VECTOR )
{
 184:	1f 92       	push	r1
 186:	0f 92       	push	r0
 188:	0f b6       	in	r0, 0x3f	; 63
 18a:	0f 92       	push	r0
 18c:	11 24       	eor	r1, r1
 18e:	8f 93       	push	r24
 190:	9f 93       	push	r25
 192:	ef 93       	push	r30
 194:	ff 93       	push	r31

  switch ( overflowState )
 196:	80 91 7a 00 	lds	r24, 0x007A
 19a:	82 30       	cpi	r24, 0x02	; 2
 19c:	09 f4       	brne	.+2      	; 0x1a0 <__vector_14+0x1c>
 19e:	51 c0       	rjmp	.+162    	; 0x242 <__vector_14+0xbe>
 1a0:	28 f4       	brcc	.+10     	; 0x1ac <__vector_14+0x28>
 1a2:	88 23       	and	r24, r24
 1a4:	59 f0       	breq	.+22     	; 0x1bc <__vector_14+0x38>
 1a6:	81 30       	cpi	r24, 0x01	; 1
 1a8:	69 f1       	breq	.+90     	; 0x204 <__vector_14+0x80>
 1aa:	6e c0       	rjmp	.+220    	; 0x288 <__vector_14+0x104>
 1ac:	84 30       	cpi	r24, 0x04	; 4
 1ae:	09 f4       	brne	.+2      	; 0x1b2 <__vector_14+0x2e>
 1b0:	50 c0       	rjmp	.+160    	; 0x252 <__vector_14+0xce>
 1b2:	00 f1       	brcs	.+64     	; 0x1f4 <__vector_14+0x70>
 1b4:	85 30       	cpi	r24, 0x05	; 5
 1b6:	09 f4       	brne	.+2      	; 0x1ba <__vector_14+0x36>
 1b8:	53 c0       	rjmp	.+166    	; 0x260 <__vector_14+0xdc>
 1ba:	66 c0       	rjmp	.+204    	; 0x288 <__vector_14+0x104>
  {

    // Address mode: check address and send ACK (and next USI_SLAVE_SEND_DATA) if OK,
    // else reset USI
    case USI_SLAVE_CHECK_ADDRESS:
      if ( ( USIDR == 0 ) || ( ( USIDR >> 1 ) == slaveAddress) )
 1bc:	8f b1       	in	r24, 0x0f	; 15
 1be:	88 23       	and	r24, r24
 1c0:	31 f0       	breq	.+12     	; 0x1ce <__vector_14+0x4a>
 1c2:	9f b1       	in	r25, 0x0f	; 15
 1c4:	96 95       	lsr	r25
 1c6:	80 91 7b 00 	lds	r24, 0x007B
 1ca:	98 13       	cpse	r25, r24
 1cc:	0e c0       	rjmp	.+28     	; 0x1ea <__vector_14+0x66>
      {
          if ( USIDR & 0x01 )
 1ce:	78 9b       	sbis	0x0f, 0	; 15
 1d0:	04 c0       	rjmp	.+8      	; 0x1da <__vector_14+0x56>
        {
          overflowState = USI_SLAVE_SEND_DATA;
 1d2:	81 e0       	ldi	r24, 0x01	; 1
 1d4:	80 93 7a 00 	sts	0x007A, r24
 1d8:	03 c0       	rjmp	.+6      	; 0x1e0 <__vector_14+0x5c>
        }
        else
        {
          overflowState = USI_SLAVE_REQUEST_DATA;
 1da:	84 e0       	ldi	r24, 0x04	; 4
 1dc:	80 93 7a 00 	sts	0x007A, r24
        } // end if
        SET_USI_TO_SEND_ACK( );
 1e0:	1f b8       	out	0x0f, r1	; 15
 1e2:	b8 9a       	sbi	0x17, 0	; 23
 1e4:	8e e7       	ldi	r24, 0x7E	; 126
 1e6:	8e b9       	out	0x0e, r24	; 14
 1e8:	4f c0       	rjmp	.+158    	; 0x288 <__vector_14+0x104>
      }
      else
      {
        SET_USI_TO_TWI_START_CONDITION_MODE( );
 1ea:	88 ea       	ldi	r24, 0xA8	; 168
 1ec:	8d b9       	out	0x0d, r24	; 13
 1ee:	80 e7       	ldi	r24, 0x70	; 112
 1f0:	8e b9       	out	0x0e, r24	; 14
 1f2:	4a c0       	rjmp	.+148    	; 0x288 <__vector_14+0x104>
      break;

    // Master write data mode: check reply and goto USI_SLAVE_SEND_DATA if OK,
    // else reset USI
    case USI_SLAVE_CHECK_REPLY_FROM_SEND_DATA:
      if ( USIDR )
 1f4:	8f b1       	in	r24, 0x0f	; 15
 1f6:	88 23       	and	r24, r24
 1f8:	29 f0       	breq	.+10     	; 0x204 <__vector_14+0x80>
      {
        // if NACK, the master does not want more data
        SET_USI_TO_TWI_START_CONDITION_MODE( );
 1fa:	88 ea       	ldi	r24, 0xA8	; 168
 1fc:	8d b9       	out	0x0d, r24	; 13
 1fe:	80 e7       	ldi	r24, 0x70	; 112
 200:	8e b9       	out	0x0e, r24	; 14
        return;
 202:	42 c0       	rjmp	.+132    	; 0x288 <__vector_14+0x104>

    // copy data from buffer to USIDR and set USI to shift byte
    // next USI_SLAVE_REQUEST_REPLY_FROM_SEND_DATA
    case USI_SLAVE_SEND_DATA:
      // Get data from Buffer
      if ( txHead != txTail )
 204:	90 91 65 00 	lds	r25, 0x0065
 208:	80 91 64 00 	lds	r24, 0x0064
 20c:	98 17       	cp	r25, r24
 20e:	a1 f0       	breq	.+40     	; 0x238 <__vector_14+0xb4>
      {
        txTail = ( txTail + 1 ) & TWI_TX_BUFFER_MASK;
 210:	80 91 64 00 	lds	r24, 0x0064
 214:	8f 5f       	subi	r24, 0xFF	; 255
 216:	8f 70       	andi	r24, 0x0F	; 15
 218:	80 93 64 00 	sts	0x0064, r24
        USIDR = txBuf[ txTail ];
 21c:	e0 91 64 00 	lds	r30, 0x0064
 220:	f0 e0       	ldi	r31, 0x00	; 0
 222:	ea 59       	subi	r30, 0x9A	; 154
 224:	ff 4f       	sbci	r31, 0xFF	; 255
 226:	80 81       	ld	r24, Z
 228:	8f b9       	out	0x0f, r24	; 15
      {
        // the buffer is empty
        SET_USI_TO_TWI_START_CONDITION_MODE( );
        return;
      } // end if
      overflowState = USI_SLAVE_REQUEST_REPLY_FROM_SEND_DATA;
 22a:	82 e0       	ldi	r24, 0x02	; 2
 22c:	80 93 7a 00 	sts	0x007A, r24
      SET_USI_TO_SEND_DATA( );
 230:	b8 9a       	sbi	0x17, 0	; 23
 232:	80 e7       	ldi	r24, 0x70	; 112
 234:	8e b9       	out	0x0e, r24	; 14
      break;
 236:	28 c0       	rjmp	.+80     	; 0x288 <__vector_14+0x104>
        USIDR = txBuf[ txTail ];
      }
      else
      {
        // the buffer is empty
        SET_USI_TO_TWI_START_CONDITION_MODE( );
 238:	88 ea       	ldi	r24, 0xA8	; 168
 23a:	8d b9       	out	0x0d, r24	; 13
 23c:	80 e7       	ldi	r24, 0x70	; 112
 23e:	8e b9       	out	0x0e, r24	; 14
        return;
 240:	23 c0       	rjmp	.+70     	; 0x288 <__vector_14+0x104>
      break;

    // set USI to sample reply from master
    // next USI_SLAVE_CHECK_REPLY_FROM_SEND_DATA
    case USI_SLAVE_REQUEST_REPLY_FROM_SEND_DATA:
      overflowState = USI_SLAVE_CHECK_REPLY_FROM_SEND_DATA;
 242:	83 e0       	ldi	r24, 0x03	; 3
 244:	80 93 7a 00 	sts	0x007A, r24
      SET_USI_TO_READ_ACK( );
 248:	b8 98       	cbi	0x17, 0	; 23
 24a:	1f b8       	out	0x0f, r1	; 15
 24c:	8e e7       	ldi	r24, 0x7E	; 126
 24e:	8e b9       	out	0x0e, r24	; 14
      break;
 250:	1b c0       	rjmp	.+54     	; 0x288 <__vector_14+0x104>

    // Master read data mode: set USI to sample data from master, next
    // USI_SLAVE_GET_DATA_AND_SEND_ACK
    case USI_SLAVE_REQUEST_DATA:
      overflowState = USI_SLAVE_GET_DATA_AND_SEND_ACK;
 252:	85 e0       	ldi	r24, 0x05	; 5
 254:	80 93 7a 00 	sts	0x007A, r24
      SET_USI_TO_READ_DATA( );
 258:	b8 98       	cbi	0x17, 0	; 23
 25a:	80 e7       	ldi	r24, 0x70	; 112
 25c:	8e b9       	out	0x0e, r24	; 14
      break;
 25e:	14 c0       	rjmp	.+40     	; 0x288 <__vector_14+0x104>
    // copy data from USIDR and send ACK
    // next USI_SLAVE_REQUEST_DATA
    case USI_SLAVE_GET_DATA_AND_SEND_ACK:
      // put data into buffer
      // Not necessary, but prevents warnings
      rxHead = ( rxHead + 1 ) & TWI_RX_BUFFER_MASK;
 260:	80 91 77 00 	lds	r24, 0x0077
 264:	8f 5f       	subi	r24, 0xFF	; 255
 266:	81 70       	andi	r24, 0x01	; 1
 268:	80 93 77 00 	sts	0x0077, r24
      rxBuf[ rxHead ] = USIDR;
 26c:	e0 91 77 00 	lds	r30, 0x0077
 270:	8f b1       	in	r24, 0x0f	; 15
 272:	f0 e0       	ldi	r31, 0x00	; 0
 274:	e8 58       	subi	r30, 0x88	; 136
 276:	ff 4f       	sbci	r31, 0xFF	; 255
 278:	80 83       	st	Z, r24
      // next USI_SLAVE_REQUEST_DATA
      overflowState = USI_SLAVE_REQUEST_DATA;
 27a:	84 e0       	ldi	r24, 0x04	; 4
 27c:	80 93 7a 00 	sts	0x007A, r24
      SET_USI_TO_SEND_ACK( );
 280:	1f b8       	out	0x0f, r1	; 15
 282:	b8 9a       	sbi	0x17, 0	; 23
 284:	8e e7       	ldi	r24, 0x7E	; 126
 286:	8e b9       	out	0x0e, r24	; 14
      break;

  } // end switch

} // end ISR( USI_OVERFLOW_VECTOR )
 288:	ff 91       	pop	r31
 28a:	ef 91       	pop	r30
 28c:	9f 91       	pop	r25
 28e:	8f 91       	pop	r24
 290:	0f 90       	pop	r0
 292:	0f be       	out	0x3f, r0	; 63
 294:	0f 90       	pop	r0
 296:	1f 90       	pop	r1
 298:	18 95       	reti

0000029a <_exit>:
 29a:	f8 94       	cli

0000029c <__stop_program>:
 29c:	ff cf       	rjmp	.-2      	; 0x29c <__stop_program>
